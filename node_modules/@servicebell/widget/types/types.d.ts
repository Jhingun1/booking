declare global {
    interface Window {
        ServiceBell?: ServiceBellAPI;
    }
}
export declare type CustomMetadata = {
    displayName?: string;
    avatar?: string;
    email?: string;
} & Record<string, string | number>;
export interface ServiceBellOptions {
    /**
     * Hides the widget in its inactive state while there's no call.
     * Defaults to false.
     */
    hidden?: boolean;
    /**
     * Expands the widget by default, displaying it more prominently.
     * Defaults to false.
     */
    expanded?: boolean;
    /**
     * Whether or not to connect the widget on init, or manually later. If the client has
     * recently connected, they will connect anyway despite this setting.
     * Defaults to true.
     */
    connect?: boolean;
    /**
     * Which launcher style to use in the default state.
     * Defaults to 'video'.
     */
    launcher?: 'pill' | 'video';
    /**
     * Place the widget on the left or right side.
     * Defaults to 'right'.
     */
    position?: 'left' | 'right';
    /**
     * Class name to use to indicate that an element shouldn't be visible to an agent.
     * Defaults to 'sb-block'.
     */
    blockClass?: string;
    /**
     * How the widget initializes itself. It has three possible values.
     *
     * "retrigger" The widget will re-establish its session on each page load.
     *     This is the default and recommended mode.
     *
     * "iframe-jit" The widget loads the page into an iframe only
     *     when an agent connects. After that the widget will be continuously
     *     connected as they navigate the site.
     *
     * "iframe-immediate" (experimental) The widget immediately captures the page
     *     in an iframe and stays connected as the user navigates around the site.
     *
     * "ajax" (experimental) The widget will fetch the new page and replace the
     *     body on page navigation.
     *
     * Defaults to 'retrigger'
     */
    mode?: 'retrigger' | 'iframe-jit' | 'iframe-immediate' | 'ajax';
}
export interface AlertOptions {
    /** Title text of the notification to display to admins */
    title?: string;
    /** Body text of the notification to display to admins */
    body?: string;
}
export interface ServiceBellAPI {
    <M extends keyof ServiceBellAPI>(method: M, ...args: Parameters<ServiceBellAPI[M]>): void;
    /**
     * Initialize the react component and communication socket with an API key
     * and send the introduction message.
     *
     * @param clientKey Unique key corresponding to the ServiceBell organization
     */
    init(clientKey: string, options?: ServiceBellOptions): void;
    /**
     * Add a customer-defined identity to the user for dashboard display and
     * third party data linking.
     *
     * @param customId Customer-defined unique id
     * @param customMetadata Object containing any serializable info the customer wants
     * @param customMetadata.displayName String identity to show in the dashboard
     */
    identify(customId?: string | number, customMetadata?: CustomMetadata): void;
    /**
     * Puts the widget into the dialing state. Will show the widget if it was previously hidden.
     */
    dial(): void;
    /**
     * Puts the widget into an alert state. Only admins are notified, the user's widget will not change in any way.
     */
    alert(opts: AlertOptions): void;
    /**
     * Puts the widget into the meeting booking state. Will show the widget if it was previously hidden.
     */
    bookMeeting(): void;
    /**
     * Hide the widget, only if in an inactive state. If a call is active, widget will still be shown.
     */
    hide(): void;
    /**
     * Show the widget if it was previously hidden.
     */
    show(): void;
    /**
     * Expand the widget if it was previously collapsed.
     */
    expand(): void;
    /**
     * Collapse the widget if it was previously expanded. Certain widget states
     * cannot be collapsed, so this would have no effect.
     */
    collapse(): void;
    /**
     * Connects the widget to ServiceBell so the user can be seen in the client
     * list and proactively called. Calls to connect when the widget is already
     * connected do nothing.
     *
     * Subsequent page loads will automatically connect the user again for a
     * short period of time.
     */
    connect(): void;
    /**
     * Disconnects the widget from ServiceBell so the user won't show up in the
     * client list anymore.
     *
     * Calling disconnect after connecting will disable the automatic reconnect
     * and subsequent short term page connect.
     */
    disconnect(): void;
}
