let ServiceBell = typeof window !== 'undefined' ? window.ServiceBell : undefined;
const methods = [
    'init',
    'identify',
    'dial',
    'alert',
    'bookMeeting',
    'hide',
    'show',
    'expand',
    'collapse',
    'connect',
    'disconnect',
];
function throwIfNotBrowser() {
    if (typeof window === 'undefined') {
        throw new Error('ServiceBell methods can only be called in a browser context.');
    }
}
if (!ServiceBell) {
    const callMethod = function (m, args) {
        throwIfNotBrowser();
        // If window.ServiceBell has been replaced, call that instead
        if (window.ServiceBell && window.ServiceBell !== sb) {
            return window.ServiceBell(m, ...args);
        }
        // Otherwise push to the temporary queue
        sb.q.push([m, [...args]]);
    };
    // Create the dummy module
    const sb = function (m, ...args) {
        return callMethod(m, args);
    };
    sb.q = [];
    // Stub out named methods
    methods.forEach(m => {
        sb[m] = function (...args) {
            return callMethod(m, args);
        };
    });
    ServiceBell = sb;
    if (typeof window !== 'undefined') {
        window.ServiceBell = sb;
    }
    // Load the script, if we haven't already
    if (typeof document !== 'undefined' &&
        !document.getElementById('service-bell-script')) {
        const scriptEl = document.createElement('script');
        scriptEl.id = 'service-bell-script';
        scriptEl.src = 'https://cdn.servicebell.com/main.js';
        scriptEl.type = 'text/javascript';
        scriptEl.async = true;
        const firstScript = document.getElementsByTagName('script')[0];
        if (firstScript && firstScript.parentNode) {
            firstScript.parentNode.insertBefore(scriptEl, firstScript);
        }
        else {
            document.head.appendChild(scriptEl);
        }
    }
}
// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
var ServiceBell$1 = ServiceBell;

export default ServiceBell$1;
